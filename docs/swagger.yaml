basePath: /
definitions:
  requests.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  requests.UpdateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
  responses.MessageResponse:
    properties:
      message:
        example: operation successful
        type: string
    type: object
  responses.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
  description: A RESTful API server implemented in Go using Gin framework
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Go Server API
  version: "1.0"
paths:
  /api/users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.UserResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get detailed information about a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a user
      tags:
      - users
  /test:
    get:
      consumes:
      - application/json
      description: Simple test endpoint to check if the API is working
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      summary: Test endpoint
      tags:
      - test
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
